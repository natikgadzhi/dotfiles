// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run the `open default settings` command
// from the command palette or from `Zed` application menu.

{
  "base_keymap": "VSCode",

  "project_panel": {
    "scrollbar": {
      "show": "never"
    }
  },

  "collaboration_panel": {
    "button": false
  },
  "chat_panel": {
    "button": "when_in_call"
  },
  "notification_panel": {
    "button": false
  },

  "show_wrap_guides": true,
  "preferred_line_length": 100,
  "theme": "Andromeda",
  "vim_mode": true,

  // stock font is honestly pretty cool
  "buffer_font_family": "JetBrains Mono",
  "ui_font_size": 16,
  "buffer_font_size": 15,

  "scrollbar": {
    "show": "auto",
    "cursors": true,
    "git_diff": true,
    "search_results": true,
    "selected_symbol": true,
    "diagnostics": "all",
    "axes": {
      "horizontal": false,
      "vertical": true
    }
  },

  "git": {
    "git_gutter": "tracked_files",
    "gutter_debounce": 500
  },

  "terminal": {
    "font_family": "JetBrainsMono Nerd Font",
    "detect_venv": {
      "on": {
        "directories": ["venv", ".venv"],
        "activate_script": "fish"
      }
    }
  },

  "file_finder": {
    "modal_max_width": "large"
  },

  "assistant": {
    "default_model": {
      "provider": "zed.dev",
      "model": "claude-3-5-sonnet-latest"
    },
    "version": "2",
    "default_open_ai_model": null,
    "provider": {
      "name": "openai",
      "default_model": "gpt-4o",
      "available_models": []
    },
    "enable_experimental_live_diffs": true
  },

  // Language-specific stuff
  //
  // Enable pylsp with Python and use mypy.
  "lsp": {
    "pylsp": {
      "settings": {
        "plugins": {
          "mypy": {
            "enabled": true
          },
          "pycodestyle": {
            "enabled": false
          }
        }
      }
    }
  },

  // Override formatting on Python using Ruff
  "languages": {
    "Markdown": {
      "format_on_save": "off",
      "soft_wrap": "preferred_line_length"
    },
    "TOML": {
      "format_on_save": "off"
    },
    "Python": {
      "language_servers": ["!pyright", "pylsp"],
      "inlay_hints": {
        "enabled": true
      },
      "format_on_save": "on",
      "formatter": {
        "external": {
          "command": "bash",
          "arguments": [
            "-c",
            "ruff check --select=I --fix --stdin-filename {buffer_path} | ruff format --stdin-filename {buffer_path}"
          ]
        }
      }
    }
  }
}
